<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/globals.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/globals.css" />
              <option name="originalContent" value="@tailwind base;&#10;@tailwind components;&#10;@tailwind utilities;&#10;&#10;@layer base {&#10;  :root {&#10;    --background: 0 0% 100%;&#10;    --foreground: 0 0% 7%;&#10;    --card: 0 0% 100%;&#10;    --card-foreground: 0 0% 7%;&#10;    --popover: 0 0% 100%;&#10;    --popover-foreground: 0 0% 7%;&#10;    --primary: 0 0% 10%;&#10;    --primary-foreground: 0 0% 100%;&#10;    --secondary: 0 0% 96%;&#10;    --secondary-foreground: 0 0% 10%;&#10;    --muted: 0 0% 92%;&#10;    --muted-foreground: 0 0% 40%;&#10;    --accent: 0 0% 96%;&#10;    --accent-foreground: 0 0% 10%;&#10;    --destructive: 0 0% 20%;&#10;    --destructive-foreground: 0 0% 98%;&#10;    --border: 0 0% 86%;&#10;    --input: 0 0% 86%;&#10;    --ring: 0 0% 10%;&#10;    --radius: 0.5rem;&#10;    --chart-1: 0 0% 20%;&#10;    --chart-2: 0 0% 40%;&#10;    --chart-3: 0 0% 60%;&#10;    --chart-4: 0 0% 80%;&#10;    --chart-5: 0 0% 50%;&#10;  }&#10;&#10;  .dark {&#10;    --background: 0 0% 6%;&#10;    --foreground: 0 0% 98%;&#10;    --card: 0 0% 6%;&#10;    --card-foreground: 0 0% 98%;&#10;    --popover: 0 0% 6%;&#10;    --popover-foreground: 0 0% 98%;&#10;    --primary: 0 0% 98%;&#10;    --primary-foreground: 0 0% 10%;&#10;    --secondary: 0 0% 14%;&#10;    --secondary-foreground: 0 0% 98%;&#10;    --muted: 0 0% 16%;&#10;    --muted-foreground: 0 0% 70%;&#10;    --accent: 0 0% 14%;&#10;    --accent-foreground: 0 0% 98%;&#10;    --destructive: 0 0% 30%;&#10;    --destructive-foreground: 0 0% 98%;&#10;    --border: 0 0% 18%;&#10;    --input: 0 0% 18%;&#10;    --ring: 0 0% 80%;&#10;    --chart-1: 0 0% 80%;&#10;    --chart-2: 0 0% 60%;&#10;    --chart-3: 0 0% 40%;&#10;    --chart-4: 0 0% 20%;&#10;    --chart-5: 0 0% 50%;&#10;  }&#10;}&#10;&#10;@layer base {&#10;  * {&#10;    @apply border-border;&#10;  }&#10;  body {&#10;    @apply bg-background text-foreground;&#10;  }&#10;}&#10;&#10;html {&#10;  scroll-behavior: smooth;&#10;}&#10;&#10;@keyframes bgShift {&#10;  0% {&#10;    background-position: 0% 50%;&#10;  }&#10;  50% {&#10;    background-position: 100% 50%;&#10;  }&#10;  100% {&#10;    background-position: 0% 50%;&#10;  }&#10;}&#10;&#10;.dynbg {&#10;  /* Monochrome subtle animated background */&#10;  background: linear-gradient(-45deg, #f5f5f5, #eeeeee, #fafafa, white, white);&#10;  background-size: 300% 300%;&#10;  animation: bgShift 16s infinite;&#10;  background-attachment: fixed;&#10;}&#10;&#10;@keyframes textspace {&#10;  0% {&#10;    letter-spacing: -0.05em;&#10;  }&#10;  50%{&#10;    letter-spacing: -0.025em;&#10;  }&#10;  100% {&#10;    letter-spacing: -0.05em;&#10;  }&#10;}&#10;&#10;.dyntxt {&#10;  animation: textspace 5s infinite;&#10;}" />
              <option name="updatedContent" value="@tailwind base;&#10;@tailwind components;&#10;@tailwind utilities;&#10;&#10;@layer base {&#10;  :root {&#10;    --background: 0 0% 100%;&#10;    --foreground: 0 0% 7%;&#10;    --card: 0 0% 100%;&#10;    --card-foreground: 0 0% 7%;&#10;    --popover: 0 0% 100%;&#10;    --popover-foreground: 0 0% 7%;&#10;    --primary: 0 0% 10%;&#10;    --primary-foreground: 0 0% 100%;&#10;    --secondary: 0 0% 96%;&#10;    --secondary-foreground: 0 0% 10%;&#10;    --muted: 0 0% 92%;&#10;    --muted-foreground: 0 0% 40%;&#10;    --accent: 0 0% 96%;&#10;    --accent-foreground: 0 0% 10%;&#10;    --destructive: 0 0% 20%;&#10;    --destructive-foreground: 0 0% 98%;&#10;    --border: 0 0% 86%;&#10;    --input: 0 0% 86%;&#10;    --ring: 0 0% 10%;&#10;    --radius: 0rem;&#10;    --chart-1: 0 0% 20%;&#10;    --chart-2: 0 0% 40%;&#10;    --chart-3: 0 0% 60%;&#10;    --chart-4: 0 0% 80%;&#10;    --chart-5: 0 0% 50%;&#10;  }&#10;&#10;  .dark {&#10;    --background: 0 0% 6%;&#10;    --foreground: 0 0% 98%;&#10;    --card: 0 0% 6%;&#10;    --card-foreground: 0 0% 98%;&#10;    --popover: 0 0% 6%;&#10;    --popover-foreground: 0 0% 98%;&#10;    --primary: 0 0% 98%;&#10;    --primary-foreground: 0 0% 10%;&#10;    --secondary: 0 0% 14%;&#10;    --secondary-foreground: 0 0% 98%;&#10;    --muted: 0 0% 16%;&#10;    --muted-foreground: 0 0% 70%;&#10;    --accent: 0 0% 14%;&#10;    --accent-foreground: 0 0% 98%;&#10;    --destructive: 0 0% 30%;&#10;    --destructive-foreground: 0 0% 98%;&#10;    --border: 0 0% 18%;&#10;    --input: 0 0% 18%;&#10;    --ring: 0 0% 80%;&#10;    --chart-1: 0 0% 80%;&#10;    --chart-2: 0 0% 60%;&#10;    --chart-3: 0 0% 40%;&#10;    --chart-4: 0 0% 20%;&#10;    --chart-5: 0 0% 50%;&#10;  }&#10;}&#10;&#10;@layer base {&#10;  * {&#10;    @apply border-border;&#10;  }&#10;  body {&#10;    @apply bg-background text-foreground;&#10;  }&#10;}&#10;&#10;html {&#10;  scroll-behavior: smooth;&#10;}&#10;&#10;.dynbg {&#10;  /* Static monochrome background for an analog feel */&#10;  background: linear-gradient(-45deg, #f5f5f5, #eeeeee, #fafafa, white, white);&#10;  background-size: 300% 300%;&#10;  /* removed animation for less motion */&#10;  background-attachment: fixed;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/ProjectCard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/ProjectCard.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import React from &quot;react&quot;;&#10;&#10;interface ProjectCardProps {&#10;    title: string;&#10;    date: string;&#10;    technologies: string[];&#10;    description: string;&#10;    githubLink?: string;&#10;    liveDemoLink?: string;&#10;}&#10;&#10;const ProjectCard: React.FC&lt;ProjectCardProps&gt; = ({&#10;                                                     title,&#10;                                                     date,&#10;                                                     technologies,&#10;                                                     description,&#10;                                                     githubLink,&#10;                                                     liveDemoLink,&#10;                                                 }) =&gt; {&#10;    return (&#10;        &lt;a href={githubLink} target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&#10;            &lt;div&#10;                className=&quot;scale-100 bg-opacity-70 bg-gray-100 hover:opacity-100 transition-all rounded-3xl p-6 outline-none hover:outline-neutral-200 duration-500 h-full hover:scale-110&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-semibold mb-2&quot;&gt;{title}&lt;/h3&gt;&#10;                &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 mb-4&quot;&gt;{date}&lt;/p&gt;&#10;                &lt;div className=&quot;mb-4&quot;&gt;&#10;                    {technologies.map((tech) =&gt; (&#10;                        &lt;span&#10;                            key={tech}&#10;                            className=&quot;inline-block bg-gray-200 rounded-full px-3 py-1 text-sm text-gray-700 mr-2 mb-2&quot;&#10;                        &gt;&#10;            {tech}&#10;          &lt;/span&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;                &lt;p className=&quot;text-gray-700 dark:text-gray-400&quot;&gt;{description}&lt;/p&gt;&#10;                {(githubLink || liveDemoLink) &amp;&amp; (&#10;                    &lt;div className=&quot;mt-4&quot;&gt;&#10;                        {liveDemoLink &amp;&amp; (&#10;                            &lt;a&#10;                                href={liveDemoLink}&#10;                                target=&quot;_blank&quot;&#10;                                rel=&quot;noopener noreferrer&quot;&#10;                                className=&quot;text-foreground hover:underline&quot;&#10;                            &gt;&#10;                                Live Demo&#10;                            &lt;/a&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;        &lt;/a&gt;&#10;&#10;    );&#10;};&#10;&#10;export default ProjectCard;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import React from &quot;react&quot;;&#10;&#10;interface ProjectCardProps {&#10;    title: string;&#10;    date: string;&#10;    technologies: string[];&#10;    description: string;&#10;    githubLink?: string;&#10;    liveDemoLink?: string;&#10;}&#10;&#10;const ProjectCard: React.FC&lt;ProjectCardProps&gt; = ({&#10;                                                     title,&#10;                                                     date,&#10;                                                     technologies,&#10;                                                     description,&#10;                                                     githubLink,&#10;                                                     liveDemoLink,&#10;                                                 }) =&gt; {&#10;    return (&#10;        &lt;a href={githubLink} target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&#10;            &lt;div&#10;                className=&quot;bg-card border border-input p-6 rounded-none h-full transition-colors hover:bg-secondary&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-semibold mb-2&quot;&gt;{title}&lt;/h3&gt;&#10;                &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 mb-4&quot;&gt;{date}&lt;/p&gt;&#10;                &lt;div className=&quot;mb-4&quot;&gt;&#10;                    {technologies.map((tech) =&gt; (&#10;                        &lt;span&#10;                            key={tech}&#10;                            className=&quot;inline-block bg-muted border border-input rounded-none px-2 py-0.5 text-xs text-foreground mr-2 mb-2&quot;&#10;                        &gt;&#10;            {tech}&#10;          &lt;/span&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;                &lt;p className=&quot;text-gray-700 dark:text-gray-400&quot;&gt;{description}&lt;/p&gt;&#10;                {(githubLink || liveDemoLink) &amp;&amp; (&#10;                    &lt;div className=&quot;mt-4&quot;&gt;&#10;                        {liveDemoLink &amp;&amp; (&#10;                            &lt;a&#10;                                href={liveDemoLink}&#10;                                target=&quot;_blank&quot;&#10;                                rel=&quot;noopener noreferrer&quot;&#10;                                className=&quot;text-foreground underline underline-offset-2&quot;&#10;                            &gt;&#10;                                Live Demo&#10;                            &lt;/a&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;        &lt;/a&gt;&#10;&#10;    );&#10;};&#10;&#10;export default ProjectCard;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/landing/About.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/landing/About.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState } from &quot;react&quot;;&#10;import { Avatar, AvatarImage } from &quot;@/components/ui/avatar&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import LinkCustom from &quot;@/components/landing/LinkCustom&quot;;&#10;import ExpandableCard from &quot;@/components/landing/ExpandableCard&quot;;&#10;import contentData from &quot;@/data/content.json&quot;;&#10;&#10;export default function About() {&#10;  const [imageSrc, setImageSrc] = useState(&quot;/statics/myface.jpg&quot;);&#10;  const showHobbies = imageSrc !== &quot;/statics/myface.jpg&quot;;&#10;&#10;  function handleImageClick() {&#10;    setImageSrc((prevSrc) =&gt;&#10;      prevSrc === &quot;/statics/myface.jpg&quot; ? &quot;/statics/otherimage.png&quot; : &quot;/statics/myface.jpg&quot;&#10;    );&#10;  }&#10;&#10;  function goBackToProfessional() {&#10;    setImageSrc(&quot;/statics/myface.jpg&quot;);&#10;  }&#10;&#10;  const aboutMeNormal = (&#10;    &lt;p className=&quot;inline-block text-muted-foreground md:text-xl sm:text-sm flex-1 tracking-tighter&quot;&gt;&#10;      {contentData.aboutMe.normal.intro}{&quot; &quot;}&#10;      &lt;LinkCustom&#10;        href={contentData.aboutMe.normal.copilotLink.href}&#10;        label={contentData.aboutMe.normal.copilotLink.label}&#10;      /&gt;&#10;      {contentData.aboutMe.normal.description}&#10;      &lt;br /&gt;&#10;      &lt;br /&gt;&#10;      {contentData.aboutMe.normal.hobbiesIntro}{&quot; &quot;}&#10;      &lt;span className=&quot;text-pink-400&quot;&gt;{contentData.aboutMe.normal.clickPrompt}&lt;/span&gt;{&quot; &quot;}&#10;      {contentData.aboutMe.normal.closing}&#10;    &lt;/p&gt;&#10;  );&#10;&#10;  const aboutHobbies = (&#10;      &lt;div className=&quot;flex-1&quot;&gt;&#10;          &lt;div className=&quot;flex gap-4 mb-3&quot;&gt;&#10;              &lt;h2 className=&quot;md:text-2xl sm:text-lg font-bold tracking-tighter&quot;&gt;&#10;                  {contentData.aboutMe.hobbies.title}&#10;              &lt;/h2&gt;&#10;              &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; onClick={goBackToProfessional}&#10;                      className=&quot;text-pink-500 hover:text-pink-600&quot;&gt;&#10;                  ← back&#10;              &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;space-y-1&quot;&gt;&#10;              {contentData.aboutMe.hobbies.items.map((item, index) =&gt; (&#10;                  &lt;ExpandableCard key={index} title={item.category}&gt;&#10;                      {item.description}&#10;                  &lt;/ExpandableCard&gt;&#10;              ))}&#10;          &lt;/div&gt;&#10;      &lt;/div&gt;&#10;  );&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div className=&quot;flex&quot;&gt;&#10;                &lt;h1 className=&quot;md:text-3xl sm:text-xl font-extrabold tracking-tighter text-left&quot;&gt;who am i?&lt;/h1&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex justify-center&quot;&gt;&#10;                &lt;div className=&quot;grid lg:grid-cols-[3fr_1fr] sm:grid-cols-1 items-center gap-4 w-full&quot;&gt;&#10;                    {showHobbies ? aboutHobbies : aboutMeNormal}&#10;          &lt;Avatar className=&quot;md:w-48 md:h-48 sm:h-32 sm:w-32 m-auto scale-105 hover:scale-110 transition-all my-2&quot;&gt;&#10;            &lt;div onClick={handleImageClick} className=&quot;cursor-pointer&quot;&gt;&#10;              &lt;AvatarImage src={imageSrc} /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/Avatar&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#13;&#10;&#13;&#10;import { useState } from &quot;react&quot;;&#13;&#10;import { Avatar, AvatarImage } from &quot;@/components/ui/avatar&quot;;&#13;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#13;&#10;import LinkCustom from &quot;@/components/landing/LinkCustom&quot;;&#13;&#10;import ExpandableCard from &quot;@/components/landing/ExpandableCard&quot;;&#13;&#10;import contentData from &quot;@/data/content.json&quot;;&#13;&#10;&#13;&#10;export default function About() {&#13;&#10;  const [imageSrc, setImageSrc] = useState(&quot;/statics/myface.jpg&quot;);&#13;&#10;  const showHobbies = imageSrc !== &quot;/statics/myface.jpg&quot;;&#13;&#10;&#13;&#10;  function handleImageClick() {&#13;&#10;    setImageSrc((prevSrc) =&gt;&#13;&#10;      prevSrc === &quot;/statics/myface.jpg&quot; ? &quot;/statics/otherimage.png&quot; : &quot;/statics/myface.jpg&quot;&#13;&#10;    );&#13;&#10;  }&#13;&#10;&#13;&#10;  function goBackToProfessional() {&#13;&#10;    setImageSrc(&quot;/statics/myface.jpg&quot;);&#13;&#10;  }&#13;&#10;&#13;&#10;  const aboutMeNormal = (&#13;&#10;    &lt;p className=&quot;inline-block text-muted-foreground md:text-xl sm:text-sm flex-1 tracking-tighter&quot;&gt;&#13;&#10;      {contentData.aboutMe.normal.intro}{&quot; &quot;}&#13;&#10;      &lt;LinkCustom&#13;&#10;        href={contentData.aboutMe.normal.copilotLink.href}&#13;&#10;        label={contentData.aboutMe.normal.copilotLink.label}&#13;&#10;      /&gt;&#13;&#10;      {contentData.aboutMe.normal.description}&#13;&#10;      &lt;br /&gt;&#13;&#10;      &lt;br /&gt;&#13;&#10;      {contentData.aboutMe.normal.hobbiesIntro}{&quot; &quot;}&#13;&#10;      &lt;span className=&quot;text-foreground underline underline-offset-4&quot;&gt;&#13;&#10;        {contentData.aboutMe.normal.clickPrompt}&#13;&#10;      &lt;/span&gt;{&quot; &quot;}&#13;&#10;      {contentData.aboutMe.normal.closing}&#13;&#10;    &lt;/p&gt;&#13;&#10;  );&#13;&#10;&#13;&#10;  const aboutHobbies = (&#13;&#10;      &lt;div className=&quot;flex-1&quot;&gt;&#13;&#10;          &lt;div className=&quot;flex gap-4 mb-3&quot;&gt;&#13;&#10;              &lt;h2 className=&quot;md:text-2xl sm:text-lg font-bold tracking-tighter&quot;&gt;&#13;&#10;                  {contentData.aboutMe.hobbies.title}&#13;&#10;              &lt;/h2&gt;&#13;&#10;              &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; onClick={goBackToProfessional}&#13;&#10;                      className=&quot;text-foreground hover:underline underline-offset-4&quot;&gt;&#13;&#10;                  ← back&#13;&#10;              &lt;/Button&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;div className=&quot;space-y-1&quot;&gt;&#13;&#10;              {contentData.aboutMe.hobbies.items.map((item, index) =&gt; (&#13;&#10;                  &lt;ExpandableCard key={index} title={item.category}&gt;&#13;&#10;                      {item.description}&#13;&#10;                  &lt;/ExpandableCard&gt;&#13;&#10;              ))}&#13;&#10;          &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;  );&#13;&#10;&#13;&#10;    return (&#13;&#10;        &lt;&gt;&#13;&#10;            &lt;div className=&quot;flex&quot;&gt;&#13;&#10;                &lt;h1 className=&quot;md:text-3xl sm:text-xl font-extrabold tracking-tighter text-left&quot;&gt;who am i?&lt;/h1&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            &lt;div className=&quot;flex justify-center&quot;&gt;&#13;&#10;                &lt;div className=&quot;grid lg:grid-cols-[3fr_1fr] sm:grid-cols-1 items-center gap-4 w-full&quot;&gt;&#13;&#10;                    {showHobbies ? aboutHobbies : aboutMeNormal}&#13;&#10;          &lt;Avatar className=&quot;md:w-48 md:h-48 sm:h-32 sm:w-32 m-auto scale-105 hover:scale-110 transition-all my-2&quot;&gt;&#13;&#10;            &lt;div onClick={handleImageClick} className=&quot;cursor-pointer&quot;&gt;&#13;&#10;              &lt;AvatarImage src={imageSrc} /&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/Avatar&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/landing/Contact.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/landing/Contact.tsx" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState } from &quot;react&quot;;&#10;import { Avatar, AvatarFallback, AvatarImage } from &quot;@/components/ui/avatar&quot;;&#10;&#10;export default function Contact() {&#10;  const [copySuccess, setCopySuccess] = useState(false);&#10;  const [copyError, setCopyError] = useState(false);&#10;&#10;  function handleCopyClick() {&#10;    const textToCopy = &quot;ryanzhang@outlook.com&quot;;&#10;    navigator.clipboard&#10;      .writeText(textToCopy)&#10;      .then(() =&gt; {&#10;        setCopySuccess(true);&#10;        setTimeout(() =&gt; setCopySuccess(false), 2000);&#10;      })&#10;      .catch(() =&gt; {&#10;        setCopyError(true);&#10;        setTimeout(() =&gt; setCopyError(false), 2000);&#10;      });&#10;  }&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;flex justify-center m-0&quot;&gt;&#10;        &lt;h1 className=&quot;text-3xl font-extrabold tracking-tighter&quot;&gt;contact me&lt;/h1&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;flex justify-center m-0 relative&quot;&gt;&#10;        &lt;div className=&quot;grid grid-cols-[1fr_6fr] items-center&quot;&gt;&#10;          &lt;Avatar className=&quot;w-12 h-12&quot;&gt;&#10;            &lt;AvatarImage src=&quot;/statics/pfp.png&quot; /&gt;&#10;            &lt;AvatarFallback&gt;Me&lt;/AvatarFallback&gt;&#10;          &lt;/Avatar&gt;&#10;          &lt;p className=&quot;inline-block text-muted-foreground md:text-lg flex-1&quot;&gt;&#10;            inquiries? email me at:&#10;            &lt;&gt; &lt;/&gt;&#10;            &lt;a&#10;              onClick={handleCopyClick}&#10;              className={&#10;                &quot;underline tracking-tight hover:tracking-normal hover:cursor-pointer transition-all text-foreground hover:underline&quot;&#10;              }&#10;            &gt;&#10;              ryanzhang@outlook.com&#10;            &lt;/a&gt;{&quot; &quot;}&#10;            or find me on linkedin!&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        {copySuccess &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-full mt-2 bg-neutral-200 text-neutral-700 px-4 py-2 rounded-lg shadow-lg animate-in fade-in-0 slide-in-from-top-2 duration-300&quot;&gt;&#10;            ✓ Email copied to clipboard!&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {copyError &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-full mt-2 bg-neutral-900 text-white px-4 py-2 rounded-lg shadow-lg animate-in fade-in-0 slide-in-from-top-2 duration-300&quot;&gt;&#10;            ✗ Failed to copy email&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/landing/Header.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/landing/Header.tsx" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#13;&#10;&#13;&#10;import { Avatar, AvatarFallback, AvatarImage } from &quot;@/components/ui/avatar&quot;;&#13;&#10;import NavLink from &quot;@/components/landing/NavLink&quot;;&#13;&#10;&#13;&#10;export default function Header() {&#13;&#10;  return (&#13;&#10;    &lt;header className=&quot;w-full sticky top-0 bg-gray-50 bg-opacity-0 z-10&quot;&gt;&#13;&#10;      &lt;div className=&quot;px-6 py-6 h-14 flex items-center justify-between max-w-xl mx-auto&quot;&gt;&#13;&#10;        &lt;nav className=&quot;flex gap-4 sm:gap-6 items-center&quot;&gt;&#13;&#10;          &lt;NavLink href=&quot;#home&quot; label=&quot;home&quot; /&gt;&#13;&#10;          &lt;NavLink href=&quot;#about&quot; label=&quot;about&quot; /&gt;&#13;&#10;          &lt;NavLink href=&quot;#projects&quot; label=&quot;projects&quot; /&gt;&#13;&#10;          &lt;NavLink href=&quot;#contact&quot; label=&quot;contact&quot; /&gt;&#13;&#10;        &lt;/nav&gt;&#13;&#10;        &lt;div className=&quot;flex gap-3 justify-between items-center ml-auto&quot;&gt;&#13;&#10;          &lt;a href=&quot;https://linkedin.com/in/rmzhang&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;&#13;&#10;            &lt;Avatar className=&quot;size-8&quot;&gt;&#13;&#10;              &lt;AvatarImage src=&quot;/statics/inlogo.png&quot; /&gt;&#13;&#10;              &lt;AvatarFallback&gt;&lt;/AvatarFallback&gt;&#13;&#10;            &lt;/Avatar&gt;&#13;&#10;          &lt;/a&gt;&#13;&#10;&#13;&#10;          &lt;a href=&quot;https://github.com/rzhang57&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;&#13;&#10;            &lt;Avatar&gt;&#13;&#10;              &lt;AvatarImage src=&quot;/statics/gitlogo.png&quot; /&gt;&#13;&#10;              &lt;AvatarFallback&gt;&lt;/AvatarFallback&gt;&#13;&#10;            &lt;/Avatar&gt;&#13;&#10;          &lt;/a&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/header&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/landing/Hero.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/landing/Hero.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;&#10;export default function Hero() {&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-2 text-center relative&quot;&gt;&#10;      &lt;h1&#10;        onClick={() =&gt; {&#10;            window.location.href = &quot;#about&quot;;&#10;        }}&#10;        className=&quot;group relative font-bold tracking-tighter hover:tracking-normal transition-all text-6xl py-4 duration-1000 hover:cursor-pointer&quot;&#10;      &gt;&#10;        ryan zhang&#10;      &lt;/h1&gt;&#10;      &lt;div className=&quot;inline text-muted-foreground md:text-3xl text-center self-center tracking-tighter leading-relaxed&quot;&gt;&#10;        previous swe intern at{'  '}&#10;        &lt;Link&#10;          href=&quot;https://www.planview.com/&quot;&#10;          target=&quot;_blank&quot;&#10;          className=&quot;inline-block transition-all duration-100 font-bold bg-gradient-to-r from-pink-400 to-pink-600 bg-clip-text text-transparent hover:brightness-125 hover:cursor-pointer px-1 pl-0&quot;&#10;        &gt;&#10;          planview&#10;        &lt;/Link&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#13;&#10;&#13;&#10;import Link from &quot;next/link&quot;;&#13;&#10;&#13;&#10;export default function Hero() {&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;space-y-2 text-center relative&quot;&gt;&#13;&#10;      &lt;h1&#13;&#10;        onClick={() =&gt; {&#13;&#10;            window.location.href = &quot;#about&quot;;&#13;&#10;        }}&#13;&#10;        className=&quot;group relative font-bold tracking-tighter hover:tracking-normal transition-all text-6xl py-4 duration-1000 hover:cursor-pointer&quot;&#13;&#10;      &gt;&#13;&#10;        ryan zhang&#13;&#10;      &lt;/h1&gt;&#13;&#10;      &lt;div className=&quot;inline text-muted-foreground md:text-3xl text-center self-center tracking-tighter leading-relaxed&quot;&gt;&#13;&#10;        previous swe intern at{'  '}&#13;&#10;        &lt;Link&#13;&#10;          href=&quot;https://www.planview.com/&quot;&#13;&#10;          target=&quot;_blank&quot;&#13;&#10;          className=&quot;inline-block transition-all duration-100 font-bold text-foreground underline-offset-4 hover:underline px-1 pl-0&quot;&#13;&#10;        &gt;&#13;&#10;          planview&#13;&#10;        &lt;/Link&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/landing/LinkCustom.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/landing/LinkCustom.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;export default function LinkCustom({ href, label }: { href: string; label: string }) {&#10;  return (&#10;    &lt;a&#10;      href={href}&#10;      className=&quot;text-blue-700 md:text-xl sm:text-md flex-1 transition-all tracking-tighter hover:tracking-tight relative group&quot;&#10;      target=&quot;_blank&quot;&#10;      rel=&quot;noreferrer&quot;&#10;    &gt;&#10;      {label}&#10;      &lt;span className=&quot;block absolute bottom-0 left-0 w-0 h-[2px] bg-blue-500 transition-all duration-500 group-hover:w-full&quot;&gt;&lt;/span&gt;&#10;    &lt;/a&gt;&#10;  );&#10;}&#10;&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;export default function LinkCustom({ href, label }: { href: string; label: string }) {&#10;  return (&#10;    &lt;a&#10;      href={href}&#10;      className=&quot;text-foreground md:text-xl sm:text-md flex-1 transition-all tracking-tighter hover:tracking-tight relative group&quot;&#10;      target=&quot;_blank&quot;&#10;      rel=&quot;noreferrer&quot;&#10;    &gt;&#10;      {label}&#10;      &lt;span className=&quot;block absolute bottom-0 left-0 w-0 h-[2px] bg-neutral-400 transition-all duration-500 group-hover:w-full&quot;&gt;&lt;/span&gt;&#10;    &lt;/a&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/landing/NavLink.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/landing/NavLink.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;export default function NavLink({ href, label }: { href: string; label: string }) {&#10;  return (&#10;    &lt;a&#10;      href={href}&#10;      className=&quot;relative group tracking-tighter text-sm font-medium text-gray-900 transition-all hover:tracking-tight&quot;&#10;    &gt;&#10;      {label}&#10;      &lt;span className=&quot;block absolute bottom-0 left-0 w-0 h-[2px] bg-neutral-300 transition-all duration-500 group-hover:w-full&quot;&gt;&lt;/span&gt;&#10;    &lt;/a&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#13;&#10;&#13;&#10;export default function NavLink({ href, label }: { href: string; label: string }) {&#13;&#10;  return (&#13;&#10;    &lt;a&#13;&#10;      href={href}&#13;&#10;      className=&quot;tracking-tighter text-sm font-medium text-gray-900 hover:underline underline-offset-2&quot;&#13;&#10;    &gt;&#13;&#10;      {label}&#13;&#10;    &lt;/a&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/ui/avatar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/ui/avatar.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import * as React from &quot;react&quot;&#10;import * as AvatarPrimitive from &quot;@radix-ui/react-avatar&quot;&#10;&#10;import { cn } from &quot;@/lib/utils&quot;&#10;&#10;const Avatar = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof AvatarPrimitive.Root&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof AvatarPrimitive.Root&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;AvatarPrimitive.Root&#10;    ref={ref}&#10;    className={cn(&#10;      &quot;relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full&quot;,&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;))&#10;Avatar.displayName = AvatarPrimitive.Root.displayName&#10;&#10;const AvatarImage = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof AvatarPrimitive.Image&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof AvatarPrimitive.Image&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;AvatarPrimitive.Image&#10;    ref={ref}&#10;    className={cn(&quot;aspect-square h-full w-full&quot;, className)}&#10;    {...props}&#10;  /&gt;&#10;))&#10;AvatarImage.displayName = AvatarPrimitive.Image.displayName&#10;&#10;const AvatarFallback = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof AvatarPrimitive.Fallback&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof AvatarPrimitive.Fallback&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;AvatarPrimitive.Fallback&#10;    ref={ref}&#10;    className={cn(&#10;      &quot;flex h-full w-full items-center justify-center rounded-full bg-muted&quot;,&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;))&#10;AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName&#10;&#10;export { Avatar, AvatarImage, AvatarFallback }&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import * as React from &quot;react&quot;&#10;import * as AvatarPrimitive from &quot;@radix-ui/react-avatar&quot;&#10;&#10;import { cn } from &quot;@/lib/utils&quot;&#10;&#10;const Avatar = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof AvatarPrimitive.Root&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof AvatarPrimitive.Root&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;AvatarPrimitive.Root&#10;    ref={ref}&#10;    className={cn(&#10;      &quot;relative flex h-10 w-10 shrink-0 overflow-hidden rounded-none&quot;,&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;))&#10;Avatar.displayName = AvatarPrimitive.Root.displayName&#10;&#10;const AvatarImage = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof AvatarPrimitive.Image&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof AvatarPrimitive.Image&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;AvatarPrimitive.Image&#10;    ref={ref}&#10;    className={cn(&quot;aspect-square h-full w-full&quot;, className)}&#10;    {...props}&#10;  /&gt;&#10;))&#10;AvatarImage.displayName = AvatarPrimitive.Image.displayName&#10;&#10;const AvatarFallback = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof AvatarPrimitive.Fallback&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof AvatarPrimitive.Fallback&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;AvatarPrimitive.Fallback&#10;    ref={ref}&#10;    className={cn(&#10;      &quot;flex h-full w-full items-center justify-center rounded-none bg-muted&quot;,&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;))&#10;AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName&#10;&#10;export { Avatar, AvatarImage, AvatarFallback }" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/ui/button.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/ui/button.tsx" />
              <option name="originalContent" value="import * as React from &quot;react&quot;&#10;import { Slot } from &quot;@radix-ui/react-slot&quot;&#10;import { cva, type VariantProps } from &quot;class-variance-authority&quot;&#10;&#10;import { cn } from &quot;@/lib/utils&quot;&#10;&#10;const buttonVariants = cva(&#10;  &quot;inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50&quot;,&#10;  {&#10;    variants: {&#10;      variant: {&#10;        default: &quot;bg-primary text-primary-foreground hover:bg-primary/90&quot;,&#10;        destructive:&#10;          &quot;bg-destructive text-destructive-foreground hover:bg-destructive/90&quot;,&#10;        outline:&#10;          &quot;border border-input bg-background hover:bg-accent hover:text-accent-foreground&quot;,&#10;        secondary:&#10;          &quot;bg-secondary text-secondary-foreground hover:bg-secondary/80&quot;,&#10;        ghost: &quot;hover:bg-accent hover:text-accent-foreground&quot;,&#10;        link: &quot;text-primary underline-offset-4 hover:underline&quot;,&#10;      },&#10;      size: {&#10;        default: &quot;h-10 px-4 py-2&quot;,&#10;        sm: &quot;h-9 rounded-md px-3&quot;,&#10;        lg: &quot;h-11 rounded-md px-8&quot;,&#10;        icon: &quot;h-10 w-10&quot;,&#10;      },&#10;    },&#10;    defaultVariants: {&#10;      variant: &quot;default&quot;,&#10;      size: &quot;default&quot;,&#10;    },&#10;  }&#10;)&#10;&#10;export interface ButtonProps&#10;  extends React.ButtonHTMLAttributes&lt;HTMLButtonElement&gt;,&#10;    VariantProps&lt;typeof buttonVariants&gt; {&#10;  asChild?: boolean&#10;}&#10;&#10;const Button = React.forwardRef&lt;HTMLButtonElement, ButtonProps&gt;(&#10;  ({ className, variant, size, asChild = false, ...props }, ref) =&gt; {&#10;    const Comp = asChild ? Slot : &quot;button&quot;&#10;    return (&#10;      &lt;Comp&#10;        className={cn(buttonVariants({ variant, size, className }))}&#10;        ref={ref}&#10;        {...props}&#10;      /&gt;&#10;    )&#10;  }&#10;)&#10;Button.displayName = &quot;Button&quot;&#10;&#10;export { Button, buttonVariants }&#10;" />
              <option name="updatedContent" value="import * as React from &quot;react&quot;&#10;import { Slot } from &quot;@radix-ui/react-slot&quot;&#10;import { cva, type VariantProps } from &quot;class-variance-authority&quot;&#10;&#10;import { cn } from &quot;@/lib/utils&quot;&#10;&#10;const buttonVariants = cva(&#10;  &quot;inline-flex items-center justify-center whitespace-nowrap rounded-none text-sm font-medium ring-offset-background transition-none focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50&quot;,&#10;  {&#10;    variants: {&#10;      variant: {&#10;        default: &quot;bg-primary text-primary-foreground hover:bg-primary/90&quot;,&#10;        destructive:&#10;          &quot;bg-destructive text-destructive-foreground hover:bg-destructive/90&quot;,&#10;        outline:&#10;          &quot;border border-input bg-background hover:bg-accent hover:text-accent-foreground&quot;,&#10;        secondary:&#10;          &quot;bg-secondary text-secondary-foreground hover:bg-secondary/80&quot;,&#10;        ghost: &quot;hover:bg-accent hover:text-accent-foreground&quot;,&#10;        link: &quot;text-primary underline-offset-4 hover:underline&quot;,&#10;      },&#10;      size: {&#10;        default: &quot;h-10 px-4 py-2&quot;,&#10;        sm: &quot;h-9 rounded-none px-3&quot;,&#10;        lg: &quot;h-11 rounded-none px-8&quot;,&#10;        icon: &quot;h-10 w-10&quot;,&#10;      },&#10;    },&#10;    defaultVariants: {&#10;      variant: &quot;default&quot;,&#10;      size: &quot;default&quot;,&#10;    },&#10;  }&#10;)&#10;&#10;export interface ButtonProps&#10;  extends React.ButtonHTMLAttributes&lt;HTMLButtonElement&gt;,&#10;    VariantProps&lt;typeof buttonVariants&gt; {&#10;  asChild?: boolean&#10;}&#10;&#10;const Button = React.forwardRef&lt;HTMLButtonElement, ButtonProps&gt;(&#10;  ({ className, variant, size, asChild = false, ...props }, ref) =&gt; {&#10;    const Comp = asChild ? Slot : &quot;button&quot;&#10;    return (&#10;      &lt;Comp&#10;        className={cn(buttonVariants({ variant, size, className }))}&#10;        ref={ref}&#10;        {...props}&#10;      /&gt;&#10;    )&#10;  }&#10;)&#10;Button.displayName = &quot;Button&quot;&#10;&#10;export { Button, buttonVariants }" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/ui/input.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/ui/input.tsx" />
              <option name="originalContent" value="import * as React from &quot;react&quot;&#10;&#10;import { cn } from &quot;@/lib/utils&quot;&#10;&#10;export interface InputProps&#10;  extends React.InputHTMLAttributes&lt;HTMLInputElement&gt; {}&#10;&#10;const Input = React.forwardRef&lt;HTMLInputElement, InputProps&gt;(&#10;  ({ className, type, ...props }, ref) =&gt; {&#10;    return (&#10;      &lt;input&#10;        type={type}&#10;        className={cn(&#10;          &quot;flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50&quot;,&#10;          className&#10;        )}&#10;        ref={ref}&#10;        {...props}&#10;      /&gt;&#10;    )&#10;  }&#10;)&#10;Input.displayName = &quot;Input&quot;&#10;&#10;export { Input }&#10;" />
              <option name="updatedContent" value="import * as React from &quot;react&quot;&#10;&#10;import { cn } from &quot;@/lib/utils&quot;&#10;&#10;export interface InputProps&#10;  extends React.InputHTMLAttributes&lt;HTMLInputElement&gt; {}&#10;&#10;const Input = React.forwardRef&lt;HTMLInputElement, InputProps&gt;(&#10;  ({ className, type, ...props }, ref) =&gt; {&#10;    return (&#10;      &lt;input&#10;        type={type}&#10;        className={cn(&#10;          &quot;flex h-10 w-full rounded-none border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50&quot;,&#10;          className&#10;        )}&#10;        ref={ref}&#10;        {...props}&#10;      /&gt;&#10;    )&#10;  }&#10;)&#10;Input.displayName = &quot;Input&quot;&#10;&#10;export { Input }" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tailwind.config.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tailwind.config.ts" />
              <option name="originalContent" value="import type { Config } from &quot;tailwindcss&quot;;&#10;&#10;const config: Config = {&#10;    content: [&#10;        &quot;./src/components/**/*.{js,ts,jsx,tsx,mdx}&quot;,&#10;        &quot;./src/app/**/*.{js,ts,jsx,tsx,mdx}&quot;,&#10;    ],&#10;    theme: {&#10;        extend: {&#10;            colors: {&#10;                // Merging background and foreground with existing custom colors&#10;                background: &quot;var(--background)&quot;,&#10;                foreground: &quot;var(--foreground)&quot;,&#10;&#10;                // Your custom HSL-based color variables&#10;                border: &quot;hsl(var(--border))&quot;,&#10;                input: &quot;hsl(var(--input))&quot;,&#10;                ring: &quot;hsl(var(--ring))&quot;,&#10;                primary: {&#10;                    DEFAULT: &quot;hsl(var(--primary))&quot;,&#10;                    foreground: &quot;hsl(var(--primary-foreground))&quot;,&#10;                },&#10;                secondary: {&#10;                    DEFAULT: &quot;hsl(var(--secondary))&quot;,&#10;                    foreground: &quot;hsl(var(--secondary-foreground))&quot;,&#10;                },&#10;                destructive: {&#10;                    DEFAULT: &quot;hsl(var(--destructive))&quot;,&#10;                    foreground: &quot;hsl(var(--destructive-foreground))&quot;,&#10;                },&#10;                muted: {&#10;                    DEFAULT: &quot;hsl(var(--muted))&quot;,&#10;                    foreground: &quot;hsl(var(--muted-foreground))&quot;,&#10;                },&#10;                accent: {&#10;                    DEFAULT: &quot;hsl(var(--accent))&quot;,&#10;                    foreground: &quot;hsl(var(--accent-foreground))&quot;,&#10;                },&#10;                popover: {&#10;                    DEFAULT: &quot;hsl(var(--popover))&quot;,&#10;                    foreground: &quot;hsl(var(--popover-foreground))&quot;,&#10;                },&#10;                card: {&#10;                    DEFAULT: &quot;hsl(var(--card))&quot;,&#10;                    foreground: &quot;hsl(var(--card-foreground))&quot;,&#10;                },&#10;            },&#10;&#10;            // Adding border radius customizations&#10;            borderRadius: {&#10;                lg: &quot;var(--radius)&quot;,&#10;                md: &quot;calc(var(--radius) - 2px)&quot;,&#10;                sm: &quot;calc(var(--radius) - 4px)&quot;,&#10;            },&#10;&#10;            // Adding custom keyframes for animations&#10;            keyframes: {&#10;                &quot;accordion-down&quot;: {&#10;                    from: { height: &quot;0&quot; },&#10;                    to: { height: &quot;var(--radix-accordion-content-height)&quot; },&#10;                },&#10;                &quot;accordion-up&quot;: {&#10;                    from: { height: &quot;var(--radix-accordion-content-height)&quot; },&#10;                    to: { height: &quot;0&quot; },&#10;                },&#10;            },&#10;&#10;            // Adding the `accordion-down` and `accordion-up` animations&#10;            animation: {&#10;                &quot;accordion-down&quot;: &quot;accordion-down 0.2s ease-out&quot;,&#10;                &quot;accordion-up&quot;: &quot;accordion-up 0.2s ease-out&quot;,&#10;            },&#10;        },&#10;    },&#10;&#10;    // Adding the tailwindcss-animate plugin&#10;    plugins: [require(&quot;tailwindcss-animate&quot;)],&#10;};&#10;&#10;export default config;" />
              <option name="updatedContent" value="import type { Config } from &quot;tailwindcss&quot;;&#13;&#10;&#13;&#10;const config: Config = {&#13;&#10;    content: [&#13;&#10;        &quot;./src/components/**/*.{js,ts,jsx,tsx,mdx}&quot;,&#13;&#10;        &quot;./src/app/**/*.{js,ts,jsx,tsx,mdx}&quot;,&#13;&#10;    ],&#13;&#10;    theme: {&#13;&#10;        extend: {&#13;&#10;            colors: {&#13;&#10;                // Merging background and foreground with existing custom colors&#13;&#10;                background: &quot;var(--background)&quot;,&#13;&#10;                foreground: &quot;var(--foreground)&quot;,&#13;&#10;&#13;&#10;                // Your custom HSL-based color variables&#13;&#10;                border: &quot;hsl(var(--border))&quot;,&#13;&#10;                input: &quot;hsl(var(--input))&quot;,&#13;&#10;                ring: &quot;hsl(var(--ring))&quot;,&#13;&#10;                primary: {&#13;&#10;                    DEFAULT: &quot;hsl(var(--primary))&quot;,&#13;&#10;                    foreground: &quot;hsl(var(--primary-foreground))&quot;,&#13;&#10;                },&#13;&#10;                secondary: {&#13;&#10;                    DEFAULT: &quot;hsl(var(--secondary))&quot;,&#13;&#10;                    foreground: &quot;hsl(var(--secondary-foreground))&quot;,&#13;&#10;                },&#13;&#10;                destructive: {&#13;&#10;                    DEFAULT: &quot;hsl(var(--destructive))&quot;,&#13;&#10;                    foreground: &quot;hsl(var(--destructive-foreground))&quot;,&#13;&#10;                },&#13;&#10;                muted: {&#13;&#10;                    DEFAULT: &quot;hsl(var(--muted))&quot;,&#13;&#10;                    foreground: &quot;hsl(var(--muted-foreground))&quot;,&#13;&#10;                },&#13;&#10;                accent: {&#13;&#10;                    DEFAULT: &quot;hsl(var(--accent))&quot;,&#13;&#10;                    foreground: &quot;hsl(var(--accent-foreground))&quot;,&#13;&#10;                },&#13;&#10;                popover: {&#13;&#10;                    DEFAULT: &quot;hsl(var(--popover))&quot;,&#13;&#10;                    foreground: &quot;hsl(var(--popover-foreground))&quot;,&#13;&#10;                },&#13;&#10;                card: {&#13;&#10;                    DEFAULT: &quot;hsl(var(--card))&quot;,&#13;&#10;                    foreground: &quot;hsl(var(--card-foreground))&quot;,&#13;&#10;                },&#13;&#10;            },&#13;&#10;&#13;&#10;            // Adding border radius customizations&#13;&#10;            borderRadius: {&#13;&#10;                lg: &quot;max(0px, var(--radius))&quot;,&#13;&#10;                md: &quot;max(0px, calc(var(--radius) - 2px))&quot;,&#13;&#10;                sm: &quot;max(0px, calc(var(--radius) - 4px))&quot;,&#13;&#10;            },&#13;&#10;&#13;&#10;            // Adding custom keyframes for animations&#13;&#10;            keyframes: {&#13;&#10;                &quot;accordion-down&quot;: {&#13;&#10;                    from: { height: &quot;0&quot; },&#13;&#10;                    to: { height: &quot;var(--radix-accordion-content-height)&quot; },&#13;&#10;                },&#13;&#10;                &quot;accordion-up&quot;: {&#13;&#10;                    from: { height: &quot;var(--radix-accordion-content-height)&quot; },&#13;&#10;                    to: { height: &quot;0&quot; },&#13;&#10;                },&#13;&#10;            },&#13;&#10;&#13;&#10;            // Adding the `accordion-down` and `accordion-up` animations&#13;&#10;            animation: {&#13;&#10;                &quot;accordion-down&quot;: &quot;accordion-down 0.2s ease-out&quot;,&#13;&#10;                &quot;accordion-up&quot;: &quot;accordion-up 0.2s ease-out&quot;,&#13;&#10;            },&#13;&#10;        },&#13;&#10;    },&#13;&#10;&#13;&#10;    // Adding the tailwindcss-animate plugin&#13;&#10;    plugins: [require(&quot;tailwindcss-animate&quot;)],&#13;&#10;};&#13;&#10;&#13;&#10;export default config;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>